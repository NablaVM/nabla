

// Import IO functionality - When imports happen the imports are prefixed with the library 
// that contain them, but they are not to be used when calling the imported object
#import std.io

// Import an example module
#import local.exmod

// Globals get computed at compile-time and can only include
// other globals in their exprssions
global MY_GLOB = 2
global OTHER_GLOB = MY_GLOB ^ 8
global WEIRD_GLOB = (MY_GLOB * OTHER_GLOB - 46 * (33 - 9.0) + 1) 
global STR_GLOB = "This is a global string!"

def main() -> int {

    // io is the library, output is module within the io library, println is an exported function from the output module
    io.output.println("Hello world")

    exmod.isgood()

    // exmod has a global, and it gets superficially scoped to exmod. 
    io.output.println(exmod.x_global)

    return 0
}

def other_stuff() -> int {

    int my_int = 42

    real my_real = 3.15159

    str my_str[100] = "This is my string"

/*
    let hh = -0.0
    let a = -11 - 1
    let b = 10 rsh (2 * 3)

    let g = 4 + 2 * 9

    let k = k and someVar

    let p = not (4 + 2 * (9-1) )
*/
    while((a>b) || (b>100) ) {

        //a = a + 1
        //let c = 0

        loop.inner {

            //c = c + 1
            break inner
        }
    }

    yield 0

    check {
        [a < b] { io.output.println("if")     }
        [a > b] { io.output.println("elseif") }
        []      { io.output.println("else - required")   }
    }



    exit
}