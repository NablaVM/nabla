#ifndef NABLA_CODE_GEN_HPP
#define NABLA_CODE_GEN_HPP

#include <string>
#include <vector>
#include <map>
#include <stack>

#include "nhll.hpp"
#include "nhll_driver.hpp"

#include "LibManifest.hpp"

#include <libnabla/projectfs.hpp>
#include <libnabla/scopetree.hpp>

namespace NHLL
{
    //! \brief Code generator - Generated byte code
    class CodeGen
    {
    public:
        //! \brief Construct a CodeGen
        CodeGen();

        //! \brief Deconstruct a CodeGen
        ~CodeGen();

        bool asm_block(std::vector<std::string> asm_code);

        bool start_function(std::string name, std::vector<FunctionParam> params,  DataPrims return_type);
        bool end_function();

        bool start_while(std::string conditional);
        bool end_while();

        bool start_loop(std::string name);
        bool end_loop();

        bool start_check();
        bool end_check();

        bool start_check_condition(std::string conditional);
        bool end_check_condition();

        bool global_variable(std::string name, std::string set_to, bool is_expr);

        bool declare_variable(std::string name, std::string set_to, bool is_expr);

        bool reassign_variable(std::string name, std::string set_to, bool is_expr);

        bool break_loop(std::string name);

        bool call_method(std::string method, std::vector<std::string> params);

        bool yield_statement(std::string value, bool is_expr);

        bool return_statement(std::string value, bool is_expr);

        bool exit_statement();

    private:

        enum class GenState
        {
            IDLE,
            BUILD_FUNCTION,
            BUILD_WHILE,
            BUILD_LOOP,
            BUILD_CHECK,
            BUILD_CHECK_COND
        };

        std::stack<GenState> state_stack;

        enum class VariableLocation
        {
            CONSTANT,
            FUNCTION
        };

        // A Variable
        struct Variable
        {
            std::string name;
            std::string definition; // Definition
            NHLL::DataPrims type;   // Type
            bool isExpression;      // Definition is an expression if true

            uint64_t address;
            VariableLocation location;
        };

        // Function representation
        struct FunctionRepresentation
        {
            FunctionRepresentation(std::string name, 
                                   std::vector<NHLL::FunctionParam> parameters, 
                                   NHLL::DataPrims return_type) : 
                                   name(name),
                                   parameters(parameters),
                                   return_type(return_type),
                                   local_stack_index(0) {}

            // Name of the function
            std::string name;

            // Expected parameters
            std::vector<NHLL::FunctionParam> parameters;

            // Return type
            NHLL::DataPrims return_type;

            // Function variables
            // Vector.end() is the current scope. Temporary scopes will be removed post-processing
            // Vector used to determing if variable is accessable
            std::vector< std::map<std::string, Variable> > scoped_variable_map;

            std::vector<std::string> asm_code;

            uint64_t local_stack_index;

            // Bytecode for function
            std::vector<uint8_t> bytes;
        };

        // Generated functions
        std::vector<FunctionRepresentation> functions;

        std::vector<Variable> constants;

        enum class VariablePollResult
        {
            OKAY,
            NOT_FOUND
        };


        // Maps to functions.back()
        FunctionRepresentation * current_function;

        uint64_t global_stack_index;

        VariablePollResult check_variable_access(std::string name, Variable & definition);

        std::string state_to_string(CodeGen::GenState state) const;

    };
}

#endif